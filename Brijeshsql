Here’s the SQL Server implementation for each of your tasks: --- 1. Query to List All Sales with Product and Customer Information SELECT s.SaleID, UPPER(p.ProductName) AS ProductNameUpper, LTRIM(RTRIM(c.CustomerName)) AS CustomerNameTrimmed, LEFT(p.ProductName, 3) AS ProductNameFirst3Chars, s.Quantity, s.SaleDate, s.SaleAmount FROM Sales s LEFT JOIN Products p ON s.ProductID = p.ProductID LEFT JOIN Customers c ON s.CustomerID = c.CustomerID; --- 2. Find Products Where Sale Amount > Average Sale Amount SELECT DISTINCT p.ProductID, p.ProductName, s.SaleAmount FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.SaleAmount > (SELECT AVG(SaleAmount) FROM Sales); --- 3. Total Sales Amount Per Product Category SELECT p.Category, SUM(s.SaleAmount) AS TotalSalesAmount FROM Sales s JOIN Products p ON s.ProductID = p.ProductID GROUP BY p.Category HAVING SUM(s.SaleAmount) > 5000; -- Only categories with total sales > $5000 --- 4. Create View for Total Sales Amount Per Customer and Rank Them CREATE VIEW CustomerTotalSales AS SELECT c.CustomerID, c.CustomerName, SUM(s.SaleAmount) AS TotalSalesAmount, RANK() OVER (ORDER BY SUM(s.SaleAmount) DESC) AS RankByTotalSales FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID GROUP BY c.CustomerID, c.CustomerName; --- 5. CTE for Top 5 Best-Selling Products Based on Quantity in the Last Month WITH BestSellingProducts AS ( SELECT p.ProductID, p.ProductName, SUM(s.Quantity) AS TotalQuantity FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.SaleDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY p.ProductID, p.ProductName ) SELECT TOP 5 ProductID, ProductName, TotalQuantity FROM BestSellingProducts ORDER BY TotalQuantity DESC; --- 6. Temporary Table for Sales Data of a Specific Category in the Last 6 Months CREATE TABLE #CategorySales ( SaleID INT, ProductID INT, SaleDate DATE, SaleAmount DECIMAL(10, 2) ); INSERT INTO #CategorySales (SaleID, ProductID, SaleDate, SaleAmount) SELECT s.SaleID, s.ProductID, s.SaleDate, s.SaleAmount FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Category = 'SpecificCategory' AND s.SaleDate >= DATEADD(MONTH, -6, GETDATE()); --- 7. Function to Calculate Discount Price CREATE FUNCTION CalculateDiscountPrice ( @Price DECIMAL(10, 2), @DiscountPercent DECIMAL(5, 2) ) RETURNS DECIMAL(10, 2) AS BEGIN RETURN @Price - (@Price * @DiscountPercent / 100); END; --- 8. Stored Procedure to Update Stock Levels and Handle High-Value Sales CREATE PROCEDURE ProcessSales ( @SalesData NVARCHAR(MAX) -- JSON array of sales records ) AS BEGIN -- Parse JSON and insert sales into Sales table INSERT INTO Sales (SaleID, ProductID, Quantity, SaleDate, SaleAmount) SELECT SaleID, ProductID, Quantity, SaleDate, SaleAmount FROM OPENJSON(@SalesData) WITH ( SaleID INT, ProductID INT, Quantity INT, SaleDate DATE, SaleAmount DECIMAL(10, 2) ); -- Handle stock updates UPDATE Products SET Stock = Stock - s.Quantity FROM Sales s WHERE Products.ProductID = s.ProductID; -- Insert high-value sales into HighValueSales table INSERT INTO HighValueSales (SaleID, ProductID, Quantity, SaleDate, SaleAmount) SELECT SaleID, ProductID, Quantity, SaleDate, SaleAmount FROM Sales WHERE SaleAmount > 1000; END; --- 9. Trigger to Update Stock Level CREATE TRIGGER UpdateStockLevel ON Sales AFTER INSERT AS BEGIN UPDATE Products SET Stock = Stock - i.Quantity FROM Inserted i WHERE Products.ProductID = i.ProductID; END; --- Insert Operations Here’s a sample insert operation for the Sales table: INSERT INTO Sales (SaleID, ProductID, Quantity, SaleDate, SaleAmount) VALUES (1, 101, 5, '2024-11-01', 500), (2, 102, 3, '2024-11-05', 300), (3, 103, 10, '2024-11-10', 1200); Let me know if you need help customizing or expanding any of these! Brijesh sql
