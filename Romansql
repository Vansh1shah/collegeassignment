Below is the implementation of your Event Management System schema with SQL Server, covering the requested tasks, views, CTEs, temporary tables, user-defined functions, stored procedures, and triggers. --- Schema and DDL Constraints -- Create Events Table CREATE TABLE Events ( EventID INT PRIMARY KEY IDENTITY(1,1), EventName NVARCHAR(100) NOT NULL, EventDate DATE NOT NULL, Venue NVARCHAR(100) NOT NULL ); -- Create Participants Table CREATE TABLE Participants ( ParticipantID INT PRIMARY KEY IDENTITY(1,1), ParticipantName NVARCHAR(100) NOT NULL, Contact NVARCHAR(15) NOT NULL ); -- Create EventParticipants Table CREATE TABLE EventParticipants ( EventParticipantID INT PRIMARY KEY IDENTITY(1,1), EventID INT NOT NULL, ParticipantID INT NOT NULL, RegistrationDate DATE NOT NULL, CONSTRAINT UQ_EventParticipant UNIQUE (EventID, ParticipantID), CONSTRAINT FK_Event FOREIGN KEY (EventID) REFERENCES Events(EventID), CONSTRAINT FK_Participant FOREIGN KEY (ParticipantID) REFERENCES Participants(ParticipantID) ); --- Insert Sample Data -- Insert into Events INSERT INTO Events (EventName, EventDate, Venue) VALUES ('Tech Conference', '2024-12-10', 'Hall A'), ('Music Fest', '2024-12-15', 'Hall B'), ('Art Workshop', '2024-11-30', 'Hall C'); -- Insert into Participants INSERT INTO Participants (ParticipantName, Contact) VALUES ('John Doe', '1234567890'), ('Jane Smith', '0987654321'), ('Sam Wilson', '1122334455'); -- Insert into EventParticipants INSERT INTO EventParticipants (EventID, ParticipantID, RegistrationDate) VALUES (1, 1, '2024-11-15'), (1, 2, '2024-11-16'), (2, 3, '2024-11-18'), (2, 1, '2024-11-19'), (3, 2, '2024-11-20'); --- Tasks 1. List all events with participant details SELECT E.EventID, E.EventName, E.EventDate, E.Venue, P.ParticipantID, P.ParticipantName, P.Contact FROM Events E LEFT JOIN EventParticipants EP ON E.EventID = EP.EventID LEFT JOIN Participants P ON EP.ParticipantID = P.ParticipantID; 2. Find the event with the highest number of participants SELECT TOP 1 E.EventID, E.EventName, COUNT(EP.ParticipantID) AS TotalParticipants FROM Events E JOIN EventParticipants EP ON E.EventID = EP.EventID GROUP BY E.EventID, E.EventName ORDER BY TotalParticipants DESC; 3. Group events by venue and calculate total participants per venue SELECT E.Venue, COUNT(EP.ParticipantID) AS TotalParticipants FROM Events E LEFT JOIN EventParticipants EP ON E.EventID = EP.EventID GROUP BY E.Venue; 4. Filter venues with more than 50 participants SELECT Venue, TotalParticipants FROM (SELECT E.Venue, COUNT(EP.ParticipantID) AS TotalParticipants FROM Events E LEFT JOIN EventParticipants EP ON E.EventID = EP.EventID GROUP BY E.Venue) AS VenueSummary WHERE TotalParticipants > 50; --- Views Create a view to rank events by participants (current year) CREATE VIEW RankedEvents AS SELECT E.EventID, E.EventName, COUNT(EP.ParticipantID) AS ParticipantCount, RANK() OVER (ORDER BY COUNT(EP.ParticipantID) DESC) AS Rank FROM Events E LEFT JOIN EventParticipants EP ON E.EventID = EP.EventID WHERE YEAR(E.EventDate) = YEAR(GETDATE()) GROUP BY E.EventID, E.EventName; --- CTE List events scheduled in the next 30 days WITH UpcomingEvents AS ( SELECT EventID, EventName, EventDate, Venue FROM Events WHERE EventDate BETWEEN GETDATE() AND DATEADD(DAY, 30, GETDATE()) ) SELECT * FROM UpcomingEvents; --- Temporary Table Create a temporary table to store registrations for a specific event CREATE TABLE #TempEventParticipants ( ParticipantID INT, ParticipantName NVARCHAR(100), Contact NVARCHAR(15) ); INSERT INTO #TempEventParticipants (ParticipantID, ParticipantName, Contact) SELECT P.ParticipantID, P.ParticipantName, P.Contact FROM EventParticipants EP JOIN Participants P ON EP.ParticipantID = P.ParticipantID WHERE EP.EventID = 1; SELECT * FROM #TempEventParticipants; DROP TABLE #TempEventParticipants; --- User-Defined Function Calculate total cost for a participant CREATE FUNCTION CalculateTotalCost(@ParticipantID INT, @BaseFee DECIMAL(10,2), @DiscountRate DECIMAL(5,2)) RETURNS DECIMAL(10,2) AS BEGIN DECLARE @TotalCost DECIMAL(10,2); SET @TotalCost = @BaseFee - (@BaseFee * @DiscountRate / 100); RETURN @TotalCost; END; --- Stored Procedure Insert participant registration details from JSON CREATE PROCEDURE InsertRegistrations @RegistrationData NVARCHAR(MAX) AS BEGIN DECLARE @EventParticipants TABLE (EventID INT, ParticipantID INT, RegistrationDate DATE); INSERT INTO @EventParticipants SELECT JSON_VALUE(value, '$.EventID') AS EventID, JSON_VALUE(value, '$.ParticipantID') AS ParticipantID, JSON_VALUE(value, '$.RegistrationDate') AS RegistrationDate FROM OPENJSON(@RegistrationData); INSERT INTO EventParticipants (EventID, ParticipantID, RegistrationDate) SELECT * FROM @EventParticipants; END; -- Example Execution EXEC InsertRegistrations '[{"EventID":1, "ParticipantID":3, "RegistrationDate":"2024-12-01"}]'; --- Trigger Send a confirmation email upon registration CREATE TRIGGER trg_SendEmailOnRegistration ON EventParticipants AFTER INSERT AS BEGIN DECLARE @EventName NVARCHAR(100), @ParticipantName NVARCHAR(100), @Contact NVARCHAR(15); SELECT @EventName = E.EventName, @ParticipantName = P.ParticipantName, @Contact = P.Contact FROM Events E JOIN Inserted I ON E.EventID = I.EventID JOIN Participants P ON I.ParticipantID = P.ParticipantID; PRINT 'Confirmation email sent to ' + @ParticipantName + ' for event ' + @EventName; END; --- This implementation provides a comprehensive structure for your event management system. Let me know if you need further clarification! Roman sql
